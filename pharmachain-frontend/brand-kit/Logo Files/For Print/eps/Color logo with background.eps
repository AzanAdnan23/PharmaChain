%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2392 1037
%%HiResBoundingBox: 0 0 2391.1199 1036.07996
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2391.1199 1036.07996 re
W
q
[0.24 0 0 -0.24 0 1036.07996] cm
q
0 0 9962.5 4315.625 re
W*
q
[3.125489 0 0 3.125882 0.00220056 0] cm
/DeviceRGB {} CS
[0.0157 0.0863 0.2078] SC
/DeviceRGB {} cs
[0.0157 0.0863 0.2078] sc
0 0 3187.5 1381.60999 re
f
Q
q
[41.61882 0 0 41.624062 -360.29593 72.370056] cm
/DeviceRGB {} CS
[0.2784 0.6706 1] SC
/DeviceRGB {} cs
[0.2784 0.6706 1] sc
17.146999 81.160004 m
15.508999 82.436005 15.214999 84.800003 16.491999 86.439003 c
17.232998 87.389999 18.341 87.887001 19.459999 87.887001 c
20.268 87.887001 21.082998 87.627998 21.771 87.092003 c
24.906 84.651001 29.188 83.119003 33.915001 81.783005 c
32.454002 79.704002 30.945002 77.530006 29.501001 75.251007 c
24.976 76.656998 20.664 78.422997 17.146999 81.160004 c
h
f
54.557999 7.611 m
53.756001 5.695 51.552998 4.792 49.636997 5.595 c
47.720997 6.396 46.818996 8.599 47.619999 10.516001 c
49.549999 15.126001 52.550999 19.629002 55.452999 23.985001 c
59.385998 29.886002 63.185997 35.595001 64.774002 41.695999 c
44.165001 33.978001 l
46.797001 32.292999 49.779999 31.018002 52.970001 29.948 c
47.870003 22.644001 l
39.224003 25.897001 31.324003 31.056 27.339003 41.693001 c
21.424004 57.487999 29.983002 69.658005 37.535004 80.398003 c
40.485004 84.592003 43.271004 88.553001 44.996002 92.425003 c
45.709003 94.027 47.279003 94.977005 48.925003 94.977005 c
49.509003 94.977005 50.104004 94.858002 50.671001 94.604004 c
52.84 93.638 53.816002 91.097 52.850002 88.930008 c
50.784004 84.290009 47.624001 79.798004 44.567001 75.451004 c
40.616001 69.834007 36.792 64.391006 35.025002 58.617004 c
55.466003 66.272003 l
52.726002 68.093002 49.606003 69.429001 46.269005 70.540001 c
50.737003 76.938004 l
59.267002 73.780006 67.125 68.739006 71.113007 58.087006 c
76.909004 42.616005 68.835007 30.501005 61.714005 19.814007 c
58.883999 15.568 56.209999 11.557 54.557999 7.611 c
h
59.287998 63.113998 m
34.07 53.668999 l
33.898998 51.439999 34.084999 49.143997 34.731998 46.755997 c
63.218998 57.424995 l
62.153 59.653 60.827999 61.525002 59.287998 63.113998 c
h
64.733002 53.402 m
36.248001 42.734001 l
37.319 40.530003 38.662003 38.672001 40.238003 37.096001 c
65.524002 46.565002 l
65.623001 48.771 65.389999 51.041 64.733002 53.402 c
h
f
85.009003 11.782 m
83.428001 10.013 80.711006 9.858999 78.940002 11.44 c
75.681999 14.349999 70.811005 16.075001 65.389999 17.583 c
66.979996 19.968 68.650002 22.479 70.221001 25.129 c
75.611 23.487 80.721001 21.375999 84.667 17.851 c
86.436996 16.27 86.591003 13.553001 85.009003 11.782 c
h
f
Q
q
[47.116028 0 0 47.12196 3724.3828 1560.48608] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
12.92 10.520001 m
12.92 13.56 10.56 16.02 7.64 16.040001 c
4.04 16.040001 l
4.04 20 l
1.8 20 l
1.8 5 l
7.64 5 l
10.56 5.02 12.92 7.48 12.92 10.520001 c
h
7.6 14.2 m
9.32 14.2 10.7 12.54 10.7 10.52 c
10.7 8.499999 9.32 6.839999 7.6 6.839999 c
4.04 6.839999 l
4.04 14.199999 l
7.6 14.199999 l
7.6 14.2 l
h
24.66 14.3 m
24.66 20 l
22.6 20 l
22.6 14.5 l
22.6 12.5 21.98 11.62 20.280001 11.62 c
18.360001 11.62 17.58 12.96 17.58 14.7 c
17.58 20 l
15.520001 20 l
15.520001 5 l
17.58 5 l
17.58 11.719999 l
17.860001 10.839999 19.1 10.039999 20.280001 9.959999 c
22.960001 9.759999 24.66 11.06 24.66 14.299999 c
24.66 14.3 l
h
31.48 9.92 m
34.32 9.92 35.459999 11.64 35.459999 13.1 c
35.459999 20 l
33.399998 20 l
33.399998 18.92 l
32.679996 19.9 31.399998 20.18 30.599998 20.18 c
28.339998 20.18 26.859999 18.860001 26.859999 17.1 c
26.859999 14.64 28.699999 13.76 30.599998 13.76 c
33.399998 13.76 l
33.399998 13.1 l
33.399998 12.480001 33.159996 11.620001 31.479998 11.620001 c
30.539997 11.620001 29.679998 12.120001 29.119997 12.900001 c
27.699997 11.620001 l
28.639997 10.580001 29.979998 9.920001 31.479998 9.920001 c
31.48 9.92 l
h
33.400002 16.92 m
33.400002 15.440001 l
30.880001 15.440001 l
29.660002 15.440001 28.800001 16.060001 28.940001 17.18 c
29.060001 18.120001 29.82 18.5 30.880001 18.5 c
32.780003 18.5 33.400002 17.6 33.400002 16.92 c
h
43.880001 10.24 m
43.440002 11.86 l
43.300003 11.78 42.860001 11.639999 42.500004 11.639999 c
40.800003 11.639999 40.000004 13.259999 40.000004 15.259999 c
40.000004 20 l
37.940002 20 l
37.940002 10.12 l
40.000004 10.12 l
40.000004 11.52 l
40.240005 10.599999 41.300003 9.94 42.480003 9.94 c
43.020004 9.94 43.600002 10.08 43.880005 10.24 c
43.880001 10.24 l
h
53.959999 14.3 m
53.959999 20 l
51.879997 20 l
51.899998 19.92 l
51.899998 14.5 l
51.899998 12.5 51.379997 11.62 49.679996 11.62 c
47.759995 11.62 47.079998 12.96 47.079998 14.7 c
47.079998 20 l
45.019997 20 l
45.019997 10.12 l
47.079998 10.12 l
47.079998 11.72 l
47.359997 10.84 48.5 10.04 49.679996 9.96 c
51.619995 9.82 52.999996 10.46 53.619995 12.06 c
54.039993 10.7 55.379993 10.039999 56.539993 9.959999 c
59.219994 9.759999 60.819992 11.06 60.819992 14.299999 c
60.819992 20 l
58.759991 20 l
58.759991 14.5 l
58.759991 12.5 58.23999 11.62 56.539989 11.62 c
54.819988 11.62 54.099991 12.7 53.959991 14.3 c
53.959999 14.3 l
h
67.32 9.92 m
70.160004 9.92 71.300003 11.64 71.300003 13.1 c
71.300003 20 l
69.240005 20 l
69.240005 18.92 l
68.520004 19.9 67.240005 20.18 66.440002 20.18 c
64.18 20.18 62.700001 18.860001 62.700001 17.1 c
62.700001 14.64 64.540001 13.76 66.440002 13.76 c
69.240005 13.76 l
69.240005 13.1 l
69.240005 12.480001 69.000008 11.620001 67.320007 11.620001 c
66.380005 11.620001 65.520004 12.120001 64.960007 12.900001 c
63.540009 11.620001 l
64.480011 10.580001 65.820007 9.920001 67.320007 9.920001 c
67.32 9.92 l
h
69.239998 16.92 m
69.239998 15.440001 l
66.720001 15.440001 l
65.5 15.440001 64.639999 16.060001 64.779999 17.18 c
64.900002 18.120001 65.659996 18.5 66.720001 18.5 c
68.620003 18.5 69.239998 17.6 69.239998 16.92 c
h
85.279999 16.459999 m
86.739998 17.919998 l
85.360001 19.439999 83.379997 20.199999 81.199997 20.199999 c
76.979996 20.199999 73.579994 16.859999 73.579994 12.499999 c
73.579994 8.159999 76.979996 4.819999 81.199997 4.819999 c
83.379997 4.819999 85.360001 5.579999 86.759995 7.119999 c
85.299995 8.579999 l
84.419998 7.299999 82.819992 6.659999 81.199997 6.659999 c
78.099998 6.659999 75.799995 9.419999 75.799995 12.499999 c
75.799995 15.319999 77.879997 18.359999 81.199997 18.359999 c
82.639999 18.359999 84.479996 17.799999 85.279999 16.459999 c
h
98.5 14.3 m
98.5 20 l
96.440002 20 l
96.440002 14.5 l
96.440002 12.5 95.82 11.62 94.120003 11.62 c
92.200005 11.62 91.420006 12.96 91.420006 14.7 c
91.420006 20 l
89.360008 20 l
89.360008 5 l
91.420006 5 l
91.420006 11.719999 l
91.700005 10.839999 92.940002 10.039999 94.120003 9.959999 c
96.800003 9.759999 98.5 11.06 98.5 14.299999 c
98.5 14.3 l
h
105.32 9.92 m
108.160004 9.92 109.300003 11.64 109.300003 13.1 c
109.300003 20 l
107.240005 20 l
107.240005 18.92 l
106.520004 19.9 105.240005 20.18 104.440002 20.18 c
102.18 20.18 100.700005 18.860001 100.700005 17.1 c
100.700005 14.64 102.540001 13.76 104.440002 13.76 c
107.240005 13.76 l
107.240005 13.1 l
107.240005 12.480001 107.000008 11.620001 105.320007 11.620001 c
104.380005 11.620001 103.520004 12.120001 102.960007 12.900001 c
101.540009 11.620001 l
102.480011 10.580001 103.820007 9.920001 105.320007 9.920001 c
105.32 9.92 l
h
107.239998 16.92 m
107.239998 15.440001 l
104.720001 15.440001 l
103.5 15.440001 102.639999 16.060001 102.779999 17.18 c
102.900002 18.120001 103.659996 18.5 104.720001 18.5 c
106.620003 18.5 107.239998 17.6 107.239998 16.92 c
h
114.139999 10.12 m
114.139999 20 l
112.080002 20 l
112.080002 10.12 l
114.139999 10.12 l
h
114.239998 6.5 m
114.239998 7.14 113.739998 7.64 113.099998 7.64 c
112.479996 7.64 111.979996 7.14 111.979996 6.5 c
111.979996 5.88 112.479996 5.38 113.099998 5.38 c
113.739998 5.38 114.239998 5.88 114.239998 6.5 c
h
126.18 14.3 m
126.18 20 l
124.120003 20 l
124.120003 14.5 l
124.120003 12.5 123.5 11.62 121.800003 11.62 c
119.880005 11.62 119.100006 12.96 119.100006 14.7 c
119.100006 20 l
117.040009 20 l
117.040009 10.12 l
119.100006 10.12 l
119.100006 11.72 l
119.380005 10.84 120.620003 10.04 121.800003 9.96 c
124.480003 9.76 126.18 11.06 126.18 14.3 c
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
